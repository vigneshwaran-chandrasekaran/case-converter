{"version":3,"sources":["pages/NotFound.js","pages/CaseConverter.js","router.js","serviceWorker.js","index.js"],"names":["NotFound","status","title","subTitle","extra","type","CaseConverter","useState","value","setValue","onSubmit","event","alert","preventDefault","onChange","target","toUpperCase","toLowerCase","camelCase","Content","Layout","Router","style","minHeight","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAGO,SAASA,IACf,OACC,kBAAC,IAAD,CACCC,OAAO,MACPC,MAAM,MACNC,SAAS,8CACTC,MAAO,kBAAC,IAAD,CAAQC,KAAK,WAAb,e,oBCNH,SAASC,IAAiB,IAAD,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAY/B,OACC,6BACC,0BAAMC,SAPR,SAAsBC,GACrBC,MAAM,2BAA6BJ,GACnCG,EAAME,mBAMJ,+BACC,8BAAUL,MAAOA,EAAOM,SAb5B,SAAsBH,GACrBF,EAASE,EAAMI,OAAOP,WAcpB,6BACC,2BAAOH,KAAK,SAASG,MAAM,YAE5B,2BAAIA,EAAMQ,eACV,2BAAIR,EAAMS,eACV,2BAAIC,oBAAUV,M,ICpBVW,EAAYC,IAAZD,QAEO,SAASE,IACvB,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAQC,MAAO,CAAEC,UAAW,UAC3B,kBAAC,IAAD,KACC,kBAACJ,EAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOK,KAAK,mBACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,KACX,kBAAC,EAAD,Y,OCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACX,EAAD,OAEDY,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.063bb191.chunk.js","sourcesContent":["import React from 'react';\nimport { Result, Button } from 'antd';\n\nexport function NotFound() {\n\treturn (\n\t\t<Result\n\t\t\tstatus=\"404\"\n\t\t\ttitle=\"404\"\n\t\t\tsubTitle=\"Sorry, the page you visited does not exist.\"\n\t\t\textra={<Button type=\"primary\">Back Home</Button>}\n\t\t/>\n\t);\n}\n","import React, { useState } from 'react';\nimport { camelCase } from 'lodash';\n\nexport function CaseConverter() {\n\tconst [value, setValue] = useState('');\n\n\tfunction handleChange(event) {\n\t\tsetValue(event.target.value);\n\t}\n\n\tfunction handleSubmit(event) {\n\t\talert('An essay was submitted: ' + value);\n\t\tevent.preventDefault();\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<label>\n\t\t\t\t\t<textarea value={value} onChange={handleChange} />\n\t\t\t\t</label>\n\t\t\t\t<div>\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t</div>\n\t\t\t\t<p>{value.toUpperCase()}</p>\n\t\t\t\t<p>{value.toLowerCase()}</p>\n\t\t\t\t<p>{camelCase(value)}</p>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport * as Pages from './pages';\n\nconst { Content } = Layout;\n\nexport default function Router() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Layout style={{ minHeight: '100vh' }}>\n\t\t\t\t<Layout>\n\t\t\t\t\t<Content>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/case-converter\">\n\t\t\t\t\t\t\t\t<Pages.CaseConverter />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"*\">\n\t\t\t\t\t\t\t\t<Pages.NotFound />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Content>\n\t\t\t\t</Layout>\n\t\t\t</Layout>\n\t\t</BrowserRouter>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from './router';\nimport './styles/style.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Router />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}